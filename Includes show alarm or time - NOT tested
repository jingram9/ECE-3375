//Files to Include 
#include "address_map_arm.h"
#include "lcd_driver.h"
#include "lcd_graphic.h"


//Display Hex Function - Works with AM / PM feature  
void DisplayHex(int HT, int HO, int MT, int MO, int AMPM)
{	volatile long * DISPLAY0 = (int*)HEX3_HEX0_BASE; //DISPLAY0 is a pointer to the right 7 segment displays which will read the seconds and centiseconds
	volatile long * DISPLAY1 = (int*)HEX5_HEX4_BASE; //DISPLAY1 is a pointer to the 7 segment display which represent the minutes 
	//Look up table: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, P, none
	volatile int lookUpTable[17] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x73,0x00};
	*DISPLAY0 = lookUpTable[12] + lookUpTable[AMPM] * 256 + lookUpTable[MO] * 65536 + lookUpTable[MT] * 16777216;
	*DISPLAY1 = lookUpTable[THO] + lookUpTable[THT] * 256;
	// 256, 65536, and 17777216 are required to shift the hex value. For example, if we wanted to display 0 (3F) in the rightmost (first seconds column) 3F*256= 3F00.  Note 256 in Hex is 100. The same principal is applied throughout 
}

//Needed for the clock 
void interrupt(){
	volatile int * Timer = HPS_TIMER0_BASE; 
	int Fur = Timer[3]; //Reads the end of interrupt which clears the interrupt 
}


int main()
{
	//DISPLAY STUFF 
	/* create a message to be displayed on the VGA display */
    char text_day_lcd[17]    = "Monday\0"; // 17 char - 6 char = 11 char --> 11 char / 2 = 5.5char
    char text_month_lcd[17]    = "March\0";
    char text_date_lcd[17]    = "27\0";
    char text_year_lcd[17]    = "2019\0";
    char text_temp_lcd[17]    = "Temp: 5 deg C\0";
    init_spim0();
    init_lcd();
    clear_screen();
	LCD_text(text_day_lcd, 0);
    LCD_text(text_month_lcd, 1);
    LCD_text(text_date_lcd, 2);
    LCD_text(text_year_lcd, 3);
    LCD_text(text_temp_lcd, 5);
    refresh_buffer();
	
	//VARIABLES
	//Current Time Variables 
	volatile int TMO = 0, TMT = 0, THO = 1, THT = 0, AMPMT = 0, x = 0;
	//Alarm Variables 
	volatile int AMO = 0, AMT = 0, AHO = 0, AHT = 0, AMPMA = 0;
	//Variables needed to interpret internal clock 
	volatile int Seconds = 0, CentSeconds = 0;
	
	
	//Options that depend on the switches 
	int AlarmOn = 0; //Off when 0, on when 1
	int CoffeeOption = 0; //Off when 0, on when 1
	int TimeAlarm = 0; //Time when 0, Alarm when 1
	
	
	//Timer Stuff
	volatile int * Timer = HPS_TIMER0_BASE;
	Timer[2] = 0x00; //configures the times
	Timer[0] = 0xF4240; //million in hex 100 million divided by  100 
	Timer[2] = 0x03;// sets I to 0, M to 1 and E to 1


	volatile int * PB = KEY_BASE; //KEYBASE is the address of the push buttons (PB = push button)
	
	
	
	//Entire program is in an endless loop 
	while (1) {
		
		//When timer has reached its count value of 0.01 seconds 
		if (Timer[4] == 0x01){
			CentSeconds++;
			//Once 100 centiseconds has been reached, count 1 second 
			if (CentSeconds == 100){
				CentSeconds = 0;
				Seconds ++;
			}
			//Increment the time properly  
			if (Seconds == 60){
				Seconds = 0;
				TMO++;
			}
			if (TMO == 10) {
				TMT++;
				TMO = 0;
			}
			if (TMT == 6) {
				TMT = 0;
				THO++;
			}
			if (THO == 10) {
				THO = 0;
				THT++;
			}
			if (THT == 1 && THO == 3) {
				THT = 0;
				THO = 1;
				AMPMT++; //Change AM/PM if 12:59 is passed 
			}
			//Reset the clock to count again 
			interrupt(); //runs the interrupt and then reads F to reset
			Timer[2] = 0x00; //reconfigures the times
			Timer[0] = 0xF4240; 
			Timer[2] = 0x03;
		} // End of incrementing the clock 
		
		
		//FUNCTION TO TOGGLE TimeAlarm based on switch
		
		
		//NOW to display things 
		if (TimeAlarm == 0){ //Show the time 
			x = (AMPMT % 2) + 10;
			DisplayHex(THT, THO, TMT, TMO, x);
		
		} if (TimeAlarm == 1) { //Show the Alarm 
			x = (AMPMA % 2) + 10;
			DisplayHex(AHT, AHO, AMT, AMO, x);
		
		}
		
		
		

		if (TMO == AMO && TMT == AMT && THO == AHO && THT == AHT && ((AMPMT%2) == AMPMA)) {
			if (AlarmOn == 1) {
				AMO = AMO + 9;
				if (AMO >= 10) {
					AMO = AMO - 10;
					AMT++;
				}
			} else if (AlarmOn == 0) {
				AMO = 0;
				AMT = 0;
				AHO = 0;
				AHT = 0;
			}
		}

	}
    return 0;
}
